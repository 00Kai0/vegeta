package vegeta

import (
	"encoding/gob"
	"io"
	"sort"
	"time"
)

func init() {
	gob.Register(&Result{})
}

// Result represents the metrics defined out of an http.Response
// generated by each target hit
type Result struct {
	Code      uint16
	Timestamp time.Time
	Latency   time.Duration
	BytesOut  uint64
	BytesIn   uint64
	Error     string
}

// NewResults concurrently decodes Results from each of the passed io.Readers,
// aggregates them and sorts them.
func NewResults(in ...io.Reader) (Results, error) {
	resc := make(chan *Result)
	errs := make(chan error)

	for i := range in {
		go func(src io.Reader) {
			dec := gob.NewDecoder(src)
			for {
				var r Result
				if err := dec.Decode(&r); err != nil {
					errs <- err
					return
				}
				resc <- &r
			}
		}(in[i])
	}

	var (
		res  Results
		eofs int
	)
	for eofs < len(in) {
		select {
		case err := <-errs:
			if err == io.EOF {
				eofs++
			} else if err != nil {
				return nil, err
			}
		case r := <-resc:
			res = append(res, r)
		}
	}
	sort.Sort(res)

	return res, nil
}

// Results is a slice of pointers to results with sorting behavior attached.
type Results []*Result

func (r Results) Len() int           { return len(r) }
func (r Results) Less(i, j int) bool { return r[i].Timestamp.Before(r[j].Timestamp) }
func (r Results) Swap(i, j int)      { r[i], r[j] = r[j], r[i] }
